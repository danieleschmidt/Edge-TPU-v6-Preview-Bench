name: 🚀 Enhanced CI/CD Pipeline - Edge TPU v6 Benchmark

on:
  push:
    branches: [ main, develop, terragon/* ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

env:
  PYTHON_VERSION: '3.8'
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: edge-tpu-v6-bench

jobs:
  # Stage 1: Code Quality & Security Analysis
  quality-gate:
    name: 🔍 Quality Gate Analysis
    runs-on: ubuntu-latest
    outputs:
      security-score: ${{ steps.security.outputs.score }}
      quality-score: ${{ steps.quality.outputs.score }}
      should-deploy: ${{ steps.gate.outputs.deploy }}
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for proper analysis
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-prod.txt
        sudo apt-get update
        sudo apt-get install -y python3-numpy python3-scipy python3-matplotlib
    
    - name: 🔒 Security Audit
      id: security
      run: |
        python3 security_audit.py --output-format json > security_report.json
        SCORE=$(python3 -c "import json; data=json.load(open('security_report.json')); print(100 - min(100, data.get('risk_score', 0) * 10))")
        echo "score=$SCORE" >> $GITHUB_OUTPUT
        echo "🛡️ Security Score: $SCORE/100"
    
    - name: ⚡ Performance Benchmark
      id: performance
      run: |
        python3 src/edge_tpu_v6_bench/scalable_cli.py benchmark --model test_model.txt --mode hybrid --workers 2
        echo "✅ Performance validation completed"
    
    - name: 🎯 Quality Gate Validation
      id: quality
      run: |
        python3 quality_gates_comprehensive.py --json > quality_report.json
        SCORE=$(python3 -c "import json; data=json.load(open('quality_report.json')); print(data.get('overall_score', 0))")
        echo "score=$SCORE" >> $GITHUB_OUTPUT
        echo "📊 Quality Score: $SCORE/100"
    
    - name: 🚪 Deployment Gate Decision
      id: gate
      run: |
        SECURITY_SCORE="${{ steps.security.outputs.score }}"
        QUALITY_SCORE="${{ steps.quality.outputs.score }}"
        
        # Deployment criteria: Security > 70, Quality > 60
        if (( $(echo "$SECURITY_SCORE > 70" | bc -l) )) && (( $(echo "$QUALITY_SCORE > 60" | bc -l) )); then
          echo "deploy=true" >> $GITHUB_OUTPUT
          echo "✅ Deployment gate PASSED"
        else
          echo "deploy=false" >> $GITHUB_OUTPUT
          echo "❌ Deployment gate FAILED - Security: $SECURITY_SCORE, Quality: $QUALITY_SCORE"
        fi
    
    - name: 📊 Upload Quality Reports
      uses: actions/upload-artifact@v3
      with:
        name: quality-reports
        path: |
          security_report.json
          quality_report.json
          scalable_results/*.json

  # Stage 2: Multi-Platform Testing
  test-matrix:
    name: 🧪 Test Matrix (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    needs: quality-gate
    if: needs.quality-gate.outputs.should-deploy == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-20.04]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        exclude:
          - os: ubuntu-20.04
            python-version: '3.11'  # Not available on 20.04
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 📦 Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-numpy python3-scipy python3-matplotlib python3-pytest
    
    - name: 🔧 Install Package
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: 🏃 Run Test Suite
      run: |
        python3 -m pytest tests/ -v --tb=short --maxfail=5
        echo "✅ Tests completed on ${{ matrix.os }} with Python ${{ matrix.python-version }}"
    
    - name: 📈 Performance Validation
      run: |
        python3 src/edge_tpu_v6_bench/simple_cli.py benchmark --model test_model.txt
        python3 tests/performance_benchmark.py
        echo "✅ Performance validation completed"

  # Stage 3: Docker Build & Security Scan
  docker-build:
    name: 🐳 Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [quality-gate, test-matrix]
    if: needs.quality-gate.outputs.should-deploy == 'true'
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🔑 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🏗️ Build Docker Image
      run: |
        docker build -t ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
        docker build -t ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest .
    
    - name: 🔍 Container Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: 📊 Upload Security Scan Results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: 🚀 Push Docker Images
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        docker push ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest

  # Stage 4: Production Deployment
  deploy-production:
    name: 🚀 Production Deployment
    runs-on: ubuntu-latest
    needs: [quality-gate, test-matrix, docker-build]
    if: |
      needs.quality-gate.outputs.should-deploy == 'true' && 
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Deployment Tools
      run: |
        # Install kubectl, helm, etc. for K8s deployment
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
    
    - name: 🎯 Pre-deployment Validation
      run: |
        python3 validate_deployment.py --environment production
        echo "✅ Pre-deployment validation completed"
    
    - name: 🚀 Deploy to Production
      run: |
        echo "🚀 Deploying Edge TPU v6 Benchmark Suite to Production"
        echo "📊 Security Score: ${{ needs.quality-gate.outputs.security-score }}/100"
        echo "📊 Quality Score: ${{ needs.quality-gate.outputs.quality-score }}/100"
        echo "🐳 Docker Image: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        
        # Apply Kubernetes manifests
        kubectl apply -f deploy/k8s/
        kubectl rollout status deployment/edge-tpu-v6-bench
        
        echo "✅ Production deployment completed successfully"
    
    - name: 🔍 Post-deployment Health Check
      run: |
        # Wait for deployment to be ready
        sleep 30
        
        # Health check
        kubectl get pods -l app=edge-tpu-v6-bench
        kubectl logs -l app=edge-tpu-v6-bench --tail=50
        
        echo "✅ Health check completed"
    
    - name: 📢 Deployment Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          🚀 Edge TPU v6 Benchmark Suite deployed to production!
          📊 Security Score: ${{ needs.quality-gate.outputs.security-score }}/100
          📊 Quality Score: ${{ needs.quality-gate.outputs.quality-score }}/100
          🔗 Commit: ${{ github.sha }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()

  # Stage 5: Performance Monitoring
  monitor-performance:
    name: 📊 Performance Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success()
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 📈 Run Production Performance Tests
      run: |
        echo "📊 Running production performance monitoring..."
        
        # Simulate production load testing
        python3 src/edge_tpu_v6_bench/scalable_cli.py benchmark \
          --model test_model.txt \
          --mode hybrid \
          --workers 4 \
          --duration 60
        
        echo "✅ Performance monitoring completed"
    
    - name: 📊 Generate Performance Report
      run: |
        python3 tests/performance_report_demo.py
        echo "📊 Performance report generated"
    
    - name: 📤 Upload Performance Results
      uses: actions/upload-artifact@v3
      with:
        name: production-performance-report
        path: |
          scalable_results/*.json
          tests/performance_report.json

# Workflow Summary
summary:
  name: 📋 CI/CD Summary
  runs-on: ubuntu-latest
  needs: [quality-gate, test-matrix, docker-build, deploy-production, monitor-performance]
  if: always()
  
  steps:
  - name: 📋 Pipeline Summary
    run: |
      echo "🚀 CI/CD Pipeline Summary"
      echo "========================"
      echo "📊 Quality Gate: ${{ needs.quality-gate.result }}"
      echo "🧪 Test Matrix: ${{ needs.test-matrix.result }}"
      echo "🐳 Docker Build: ${{ needs.docker-build.result }}"
      echo "🚀 Deployment: ${{ needs.deploy-production.result }}"
      echo "📊 Monitoring: ${{ needs.monitor-performance.result }}"
      echo ""
      echo "📊 Security Score: ${{ needs.quality-gate.outputs.security-score }}/100"
      echo "📊 Quality Score: ${{ needs.quality-gate.outputs.quality-score }}/100"
      echo "🎯 Deployment Gate: ${{ needs.quality-gate.outputs.should-deploy }}"