🛡️  SECURITY AUDIT REPORT
============================================================
📁 Project: /root/repo
📄 Files scanned: 70 / 152
🚨 Issues found: 111
⚡ Risk score: 472

📊 ISSUES BY SEVERITY
------------------------------
  🚨 CRITICAL: 12
  ⚠️ HIGH: 54
  ⚡ MEDIUM: 37
  💡 LOW: 8

📋 ISSUES BY CATEGORY
------------------------------
  • Path Traversal: 49
  • Weak Crypto: 37
  • Code Injection: 9
  • Debug Code: 8
  • Unsafe Deserialization: 5
  • Hardcoded Secrets: 3

🔍 DETAILED FINDINGS (Top 10)
----------------------------------------
1. 🚨 CRITICAL: code_injection
   📁 File: /root/repo/security_audit.py
   📍 Line: 322
   📝 Context: recommendations.append("• Replace eval() and exec() with safer alternatives")...

2. 🚨 CRITICAL: code_injection
   📁 File: /root/repo/security_audit.py
   📍 Line: 322
   📝 Context: recommendations.append("• Replace eval() and exec() with safer alternatives")...

3. 🚨 CRITICAL: hardcoded_secrets
   📁 File: /root/repo/security_audit.py
   📍 Line: 45
   📝 Context: r'-----BEGIN PRIVATE KEY-----',...

4. 🚨 CRITICAL: hardcoded_secrets
   📁 File: /root/repo/security_audit.py
   📍 Line: 46
   📝 Context: r'-----BEGIN RSA PRIVATE KEY-----'...

5. 🚨 CRITICAL: code_injection
   📁 File: /root/repo/src/edge_tpu_v6_bench/core/security.py
   📍 Line: 116
   📝 Context: 'eval(',    # Code injection...

6. 🚨 CRITICAL: code_injection
   📁 File: /root/repo/src/edge_tpu_v6_bench/core/security.py
   📍 Line: 216
   📝 Context: code_injection_patterns = ['eval(', 'exec(', '__import__', 'compile(']...

7. 🚨 CRITICAL: code_injection
   📁 File: /root/repo/src/edge_tpu_v6_bench/core/security.py
   📍 Line: 117
   📝 Context: 'exec(',    # Code execution...

8. 🚨 CRITICAL: code_injection
   📁 File: /root/repo/src/edge_tpu_v6_bench/core/security.py
   📍 Line: 216
   📝 Context: code_injection_patterns = ['eval(', 'exec(', '__import__', 'compile(']...

9. 🚨 CRITICAL: hardcoded_secrets
   📁 File: /root/repo/src/edge_tpu_v6_bench/core/security.py
   📍 Line: 25
   📝 Context: SECRET = "secret"          # Highly restricted...

10. 🚨 CRITICAL: code_injection
   📁 File: /root/repo/tests/security_scan.py
   📍 Line: 37
   📝 Context: r'eval\s*\(': "Code injection via eval()",...

💡 SECURITY RECOMMENDATIONS
----------------------------------------
• Replace eval() and exec() with safer alternatives
• Use parameterized queries for database operations
• Move secrets to environment variables or secure vaults
• Implement secret scanning in CI/CD pipeline
• Use SHA-256 or stronger hashing algorithms
• Replace random with cryptographically secure alternatives
• Implement path validation and sanitization
• Use allowlists for file access patterns
• Implement input validation for all user inputs
• Add security testing to CI/CD pipeline

🎯 SECURITY STATUS
--------------------
🔴 CRITICAL - Serious security vulnerabilities