🛡️  SECURITY AUDIT REPORT
============================================================
📁 Project: /root/repo
📄 Files scanned: 117 / 209
🚨 Issues found: 126
⚡ Risk score: 463

📊 ISSUES BY SEVERITY
------------------------------
  🚨 CRITICAL: 9
  ⚠️ HIGH: 49
  ⚡ MEDIUM: 60
  💡 LOW: 8

📋 ISSUES BY CATEGORY
------------------------------
  • Weak Crypto: 60
  • Path Traversal: 44
  • Debug Code: 8
  • Code Injection: 7
  • Unsafe Deserialization: 5
  • Hardcoded Secrets: 2

🔍 DETAILED FINDINGS (Top 10)
----------------------------------------
1. 🚨 CRITICAL: hardcoded_secrets
   📁 File: /root/repo/security_audit.py
   📍 Line: 46
   📝 Context: r'-----BEGIN PRIVATE KEY-----',...

2. 🚨 CRITICAL: hardcoded_secrets
   📁 File: /root/repo/security_audit.py
   📍 Line: 47
   📝 Context: r'-----BEGIN RSA PRIVATE KEY-----'...

3. 🚨 CRITICAL: code_injection
   📁 File: /root/repo/src/edge_tpu_v6_bench/core/security.py
   📍 Line: 117
   📝 Context: 'eval(',    # Code injection...

4. 🚨 CRITICAL: code_injection
   📁 File: /root/repo/src/edge_tpu_v6_bench/core/security.py
   📍 Line: 217
   📝 Context: code_injection_patterns = ['eval(', 'exec(', '__import__', 'compile(']...

5. 🚨 CRITICAL: code_injection
   📁 File: /root/repo/src/edge_tpu_v6_bench/core/security.py
   📍 Line: 118
   📝 Context: 'exec(',    # Code execution...

6. 🚨 CRITICAL: code_injection
   📁 File: /root/repo/src/edge_tpu_v6_bench/core/security.py
   📍 Line: 217
   📝 Context: code_injection_patterns = ['eval(', 'exec(', '__import__', 'compile(']...

7. 🚨 CRITICAL: code_injection
   📁 File: /root/repo/tests/security_scan.py
   📍 Line: 37
   📝 Context: r'eval\s*\(': "Code injection via eval()",...

8. 🚨 CRITICAL: code_injection
   📁 File: /root/repo/tests/security_scan.py
   📍 Line: 38
   📝 Context: r'exec\s*\(': "Code injection via exec()",...

9. 🚨 CRITICAL: code_injection
   📁 File: /root/repo/tests/security_scan.py
   📍 Line: 199
   📝 Context: description="Use of os.system() - potential command injection",...

10. ⚠️ HIGH: path_traversal
   📁 File: /root/repo/deploy/docker-compose.yml
   📍 Line: 99
   📝 Context: - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro...

💡 SECURITY RECOMMENDATIONS
----------------------------------------
• Verify eval/exec usage is for defensive security scanning only
• Use parameterized queries for database operations
• Move secrets to environment variables or secure vaults
• Implement secret scanning in CI/CD pipeline
• Use SHA-256 or stronger hashing algorithms
• Replace random with cryptographically secure alternatives
• Implement path validation and sanitization
• Use allowlists for file access patterns
• Implement input validation for all user inputs
• Add security testing to CI/CD pipeline

🎯 SECURITY STATUS
--------------------
🔴 CRITICAL - Serious security vulnerabilities